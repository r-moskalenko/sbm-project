---
version: '3'
services:
# MySQL Docker Compose config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: romanm
      POSTGRES_PASSWORD: 1111
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped
    networks:
      - custom-network

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: romanm
      POSTGRES_PASSWORD: 1111
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - custom-network

  postgres-gateway:
    container_name: postgres-gateway
    image: postgres
    environment:
      POSTGRES_DB: rate_limit
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 1111
      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-gateway:/data/postgres
    ports:
      - "5433:5433"
    command: -p 5433
    restart: unless-stopped
    networks:
      - custom-network

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - custom-network

  # Mongo Docker Compose config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    restart: unless-stopped
    networks:
      - custom-network

  # Keycloak Config with MySQL database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - custom-network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realm-config/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    networks:
      - custom-network

# Zookeper and Kafka configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - custom-network

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - custom-network

# Zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - custom-network

# Eureka server
  discovery-service:
    container_name: discovery-service
    image: sbm-discovery-service
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    networks:
      - custom-network

  gateway-service:
    container_name: gateway-service
    image: sbm-gateway-service
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - zipkin
      - discovery-service
      - keycloak
      - postgres-gateway
      - redis
    networks:
      - custom-network

# Product Service Docker Compose config
  product-service:
    container_name: product-service
    image: sbm-product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-service
      - gateway-service
      - flask-service
    networks:
      - custom-network

# Order Service Docker Compose config
  order-service:
    container_name: order-service
    image: sbm-order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-service
      - gateway-service
    networks:
      - custom-network

# Inventory Service Docker Compose config
  inventory-service:
    container_name: inventory-service
    image: sbm-inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-service
      - gateway-service
    networks:
      - custom-network

# Notification Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: sbm-notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-service
      - gateway-service
    networks:
      - custom-network

  flask-service:
    container_name: flask-service
    image: sbm-flask-service
    ports:
      - "5000:5000"
    expose:
      - "5000"
    networks:
      - custom-network


networks:
  custom-network:
